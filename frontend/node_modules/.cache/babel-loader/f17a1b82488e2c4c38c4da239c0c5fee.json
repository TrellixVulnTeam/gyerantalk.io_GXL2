{"ast":null,"code":"var _s = $RefreshSig$();\n\n// usePromise.js\nimport { useState, useEffect } from 'react';\nexport default function usePromise(promiseCreator, deps) {\n  _s();\n\n  const [loading, setLoading] = useState(false); // 대기중 일때\n\n  const [resolved, setResolved] = useState(null); // 완료 일때\n\n  const [error, setError] = useState(null); // 실패 일때\n\n  useEffect(() => {\n    const process = async () => {\n      setLoading(true);\n\n      try {\n        const resolved = await promiseCreator();\n        setResolved(resolved);\n      } catch (error) {\n        setError(error);\n      }\n\n      setLoading(false);\n    };\n\n    process();\n  }, deps);\n  return [loading, resolved, error];\n}\n\n_s(usePromise, \"+zV3STQhjZJjlLm0MO8cohZZQJE=\");","map":{"version":3,"sources":["C:/Users/redqo/Desktop/Gy_git/frontend/src/usePromise.js"],"names":["useState","useEffect","usePromise","promiseCreator","deps","loading","setLoading","resolved","setResolved","error","setError","process"],"mappings":";;AAAA;AACA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,eAAe,SAASC,UAAT,CAAoBC,cAApB,EAAoCC,IAApC,EAAyC;AAAA;;AAEpD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC,CAFoD,CAEL;;AAC/C,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC,CAHoD,CAGJ;;AAChD,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAJoD,CAIV;;AAE1CC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMU,OAAO,GAAG,YAAY;AACxBL,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACAK,QAAAA,WAAW,CAACD,QAAD,CAAX;AACH,OAHD,CAGE,OAAOE,KAAP,EAAc;AACZC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;;AACDH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATD;;AAUAK,IAAAA,OAAO;AACV,GAZQ,EAYPP,IAZO,CAAT;AAcA,SAAO,CAACC,OAAD,EAAUE,QAAV,EAAoBE,KAApB,CAAP;AACH;;GArBuBP,U","sourcesContent":["// usePromise.js\r\nimport {useState, useEffect} from 'react';\r\n\r\nexport default function usePromise(promiseCreator, deps){\r\n\r\n    const [loading, setLoading] = useState(false); // 대기중 일때\r\n    const [resolved, setResolved] = useState(null); // 완료 일때\r\n    const [error, setError] = useState(null); // 실패 일때\r\n\r\n    useEffect(()=>{\r\n        const process = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const resolved = await promiseCreator();\r\n                setResolved(resolved);\r\n            } catch (error) {\r\n                setError(error);\r\n            }\r\n            setLoading(false);\r\n        }\r\n        process();\r\n    },deps);\r\n\r\n    return [loading, resolved, error];\r\n} "]},"metadata":{},"sourceType":"module"}